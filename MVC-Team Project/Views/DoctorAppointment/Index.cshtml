@{
    ViewBag.Title = "My Appointments";
    Layout = "_DoctorDashbordLayout";
}
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

<style>
    body {
        background-color: #f8f9fa;
    }
    .fc-event {
        cursor: default;
	}
 </style>

<div class="container py-3">

    <input type="hidden" id="RequestVerificationToken"
           value="@Xsrf.GetAndStoreTokens(Context).RequestToken" />
    <div id="calendar"></div>
</div>

<!-- ---------- Edit Appointment Modal ---------- -->
<div class="modal fade" id="appointmentModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <form id="appointmentForm" class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Appointment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="appointmentId" />
                <div class="mb-3">
                    <label>Date</label>
                    <input type="date" class="form-control" id="appointmentDate" required />
                </div>
                <div class="mb-3">
                    <label>Start Time</label>
                    <input type="time" class="form-control" id="startTime" required />
                </div>
                <div class="mb-3">
                    <label>End Time</label>
                    <input type="time" class="form-control" id="endTime" required />
                </div>
                <div class="mb-3">
                    <label>Status</label>
                    <select class="form-select" id="status">
                        <option value="Scheduled">Scheduled</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button id="openDelete" type="button" class="btn btn-danger">Cancel Appointment</button>
                <button type="submit" class="btn btn-primary">Save Changes</button>
            </div>
        </form>
    </div>
</div>

<!-- ---------- Delete Confirmation Modal ---------- -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <form id="deleteForm" class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Cancellation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to cancel this appointment?
                <input type="hidden" id="deleteId" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button type="submit" class="btn btn-danger">Yes, Cancel</button>
            </div>
        </form>
    </div>
</div>

<!-- ---------- Scripts ---------- -->
@section Scripts {
    <!-- CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.css" rel="stylesheet" />

    <!-- JS -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const pad=n=>n.toString().padStart(2,'0');
        const hm =d=>`${pad(d.getHours())}:${pad(d.getMinutes())}`;
        const ymd=d=>d.toISOString().slice(0,10);

        document.addEventListener('DOMContentLoaded', () => {
          const token = document.getElementById('RequestVerificationToken').value;

          const modEdit = new bootstrap.Modal(document.getElementById('appointmentModal'));
          const modDel  = new bootstrap.Modal(document.getElementById('deleteModal'));

          const idInp      = document.getElementById('appointmentId');
          const dateInp    = document.getElementById('appointmentDate');
          const stInp      = document.getElementById('startTime');
          const etInp      = document.getElementById('endTime');
          const statusSel  = document.getElementById('status');
          const delOpenBtn = document.getElementById('openDelete');
          const delIdInp   = document.getElementById('deleteId');

          let calendar;

          function fetchEvents(info, success, failure){
            fetch('/DoctorAppointment/CalendarData')
              .then(r => r.json())
              .then(data => {
                if (calendar?.view?.type === 'dayGridMonth') {
                  data = data.map(ev => ev.extendedProps?.IsAvailable
                    ? { ...ev, display: 'auto', title: 'Available' }
                    : ev);
                }
                success(data);
              })
              .catch(failure);
          }

          calendar = new FullCalendar.Calendar(document.getElementById('calendar'), {
            height:'auto',
            initialView:'dayGridMonth',
            headerToolbar:{ start:'prev,next today', center:'title', end:'dayGridMonth,timeGridWeek,timeGridDay' },
            events: fetchEvents,
            editable: true,
            eventResizableFromStart: true,
            eventDrop: saveChange,
            eventResize: saveChange,
            eventClick(info) {
              const ev = info.event;
              if (ev.title === 'Available') return;

              idInp.value = ev.id;
              dateInp.value = ymd(ev.start);
              stInp.value = hm(ev.start);
              etInp.value = hm(ev.end);
              statusSel.value = ev.extendedProps.status || 'Scheduled';

              delOpenBtn.onclick = () => { delIdInp.value = ev.id; modDel.show(); };
              modEdit.show();
            },
            datesSet() { calendar.refetchEvents(); }
          });

          calendar.render();

          document.getElementById('appointmentForm').addEventListener('submit', async e => {
            e.preventDefault();
            const body = {
              id: idInp.value,
              appointmentDate: dateInp.value,
              startTime: stInp.value + ':00',
              endTime: etInp.value + ':00',
              status: statusSel.value
            };
            const r = await fetch(`/DoctorAppointment/Update/${idInp.value}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
              },
              body: JSON.stringify(body)
            });
            if (r.ok) { calendar.refetchEvents(); modEdit.hide(); }
            else      { alert('Update failed'); }
          });

          document.getElementById('deleteForm').addEventListener('submit', async e => {
            e.preventDefault();
            const r = await fetch(`/DoctorAppointment/Cancel/${delIdInp.value}`, {
              method: 'DELETE',
              headers: { 'RequestVerificationToken': token }
            });
            if (r.ok) { calendar.refetchEvents(); modDel.hide(); modEdit.hide(); }
            else      { alert('Cancellation failed'); }
          });

          async function saveChange(info) {
            const ev = info.event;
            if (ev.title === 'Available') { info.revert(); return; }

            const body = {
              id: ev.id,
              startTime: hm(ev.start) + ':00',
              endTime: hm(ev.end) + ':00',
              status: ev.extendedProps.status
            };
            const r = await fetch(`/DoctorAppointment/Update/${ev.id}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
              },
              body: JSON.stringify(body)
            });
            if (!r.ok) { alert('Failed'); info.revert(); }
          }
        });
    </script>
}

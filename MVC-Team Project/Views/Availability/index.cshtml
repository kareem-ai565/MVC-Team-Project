@{
ViewBag.Title = "Doctor Availability";
Layout = "_DoctorDashbordLayout";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

<style>
    .fc-toolbar-title {
        color: #2c3e50;
        font-weight: 700;
        font-size: 1.5rem;
    }

    .fc-event-time {
        color: var(--secondary) !important;
        font-weight: bold;
    }

    .fc-event-title {
        color: #212529 !important;
        font-weight: 600;
    }

    .fc-event {
        cursor: move;
    }

        .fc-event.booked {
            background-color: #d3d3d3 !important;
            border-color: #a1a1a1 !important;
            color: #000 !important;
            cursor: not-allowed !important;
        }

    .fc-header-toolbar {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: space-between;
        gap: .5rem;
    }

    .fc-toolbar-chunk {
        display: flex;
        flex-wrap: wrap;
        gap: .25rem;
    }

    @@media (max-width: 575.98px) {
        .fc-toolbar-title {
            display: none;
        }

        .fc-header-toolbar {
            flex-direction: column;
            align-items: stretch;
            gap: 0.5rem;
        }

        .fc-toolbar .fc-left,
        .fc-toolbar .fc-center,
        .fc-toolbar .fc-right {
            justify-content: center;
        }

        .fc .fc-button {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
    }
</style>

<div class="content container">
    <input type="hidden" id="RequestVerificationToken"
           value="@Xsrf.GetAndStoreTokens(Context).RequestToken" />

    <div id="calendar"></div>
</div>

<!-- Modal (create / edit) -->
<div class="modal fade" id="availabilityModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="availabilityForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Add Availability</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    <input type="hidden" id="availabilityId" />

                    <div class="mb-3">
                        <label class="form-label">Date</label>
                        <input type="date" class="form-control" id="availableDate" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Start Time</label>
                        <input type="time" class="form-control" id="startTime" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">End Time</label>
                        <input type="time" class="form-control" id="endTime" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Slot Duration (minutes)</label>
                        <input type="number" class="form-control" id="slotDuration" min="5" max="120" step="5" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Max Patients</label>
                        <input type="number" class="form-control" id="maxPatients" min="1" max="100" required />
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" id="deleteBtn" class="btn btn-danger me-auto" style="display:none">Delete</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>





</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-center p-4">
            <form id="deleteForm">
                <img src="~/assets/img/sent.png" alt="delete" width="50" height="46" class="mb-3" />
                <h5 class="mb-3">Are you sure you want to delete this availability?</h5>
                <div class="d-flex justify-content-center gap-2">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js"></script>

    <script>
        function formatDateLocal(date) {
            return date.toLocaleDateString('en-CA');
        }

        function formatTimeLocal(date) {
            return date.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false });
        }

        document.addEventListener('DOMContentLoaded', () => {
            const calendarEl = document.getElementById('calendar');
            const modal = new bootstrap.Modal(document.getElementById('availabilityModal'));
            const form = document.getElementById('availabilityForm');
            const token = document.getElementById('RequestVerificationToken').value;
            const doctorId = @ViewBag.DoctorId;

            const idInput = document.getElementById('availabilityId');
            const dateInput = document.getElementById('availableDate');
            const startInput = document.getElementById('startTime');
            const endInput = document.getElementById('endTime');
            const slotInput = document.getElementById('slotDuration');
            const maxInput = document.getElementById('maxPatients');
            const deleteBtn = document.getElementById('deleteBtn');
            const modalTitle = document.getElementById('modalTitle');

            const calendar = new FullCalendar.Calendar(calendarEl, {
                height: 'auto',
                initialView: 'dayGridMonth',
                headerToolbar: {
                    start: 'prev,next today',
                    center: 'title',
                    end: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                buttonText: {
                    dayGridMonth: 'month',
                    timeGridWeek: 'week',
                    timeGridDay: 'day'
                },
                events: `/Availability/CalendarData`,
                selectable: true,
                editable: true,
                eventResizableFromStart: true,

                select(info) {
                    resetModal();
                    modalTitle.textContent = 'Add Availability';
                    dateInput.value = info.startStr.slice(0, 10);
                    startInput.value = info.startStr.slice(11, 16);
                    endInput.value = info.endStr.slice(11, 16);
                    modal.show();
                },

                // eventClick(info) {
                //     if (info.event.extendedProps.isBooked) {
                //         alert('Cannot modify a booked slot.');
                //         return;
                //     }
                //     resetModal();
                //     modalTitle.textContent = 'Edit Availability';

                //     const ev = info.event;
                //     idInput.value = ev.id;
                //     dateInput.value = formatDateLocal(ev.start);
                //     startInput.value = formatTimeLocal(ev.start);
                //     endInput.value = formatTimeLocal(ev.end);
                //     slotInput.value = ev.extendedProps.slotDuration;
                //     maxInput.value = ev.extendedProps.maxPatients;

                //     deleteBtn.style.display = 'inline-block';
                //     deleteBtn.onclick = async () => {
                //         if (!confirm('Delete this availability?')) return;
                //         const r = await fetch(`/Availability/Delete/${ev.id}`, {
                //             method: 'DELETE',
                //             headers: { 'RequestVerificationToken': token }
                //         });
                //         if (r.ok) { ev.remove(); modal.hide(); } else { alert('Failed to delete.'); }
                //     };

                //     modal.show();
                // },

                        eventClick(info) {
            if (info.event.extendedProps.isBooked) {
                alert('Cannot modify a booked slot.');
                return;
            }

            resetModal();
            modalTitle.textContent = 'Edit Availability';

            const ev = info.event;
            idInput.value = ev.id;
            dateInput.value = formatDateLocal(ev.start);
            startInput.value = formatTimeLocal(ev.start);
            endInput.value = formatTimeLocal(ev.end);
            slotInput.value = ev.extendedProps.slotDuration;
            maxInput.value = ev.extendedProps.maxPatients;

            deleteBtn.style.display = 'inline-block';
            deleteBtn.onclick = () => {
                const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
                deleteModal.show();

                const deleteForm = document.getElementById('deleteForm');
                deleteForm.onsubmit = async (e) => {
                    e.preventDefault();
                    const r = await fetch(`/Availability/Delete/${ev.id}`, {
                        method: 'DELETE',
                        headers: { 'RequestVerificationToken': token }
                    });
                    if (r.ok) {
                        ev.remove();
                        deleteModal.hide();
                        modal.hide();
                    } else {
                        alert('Failed to delete.');
                    }
                };
            };

            modal.show();
        },

                eventDrop: handleChange,
                eventResize: handleChange,

                eventDidMount(info) {
                    if (info.event.extendedProps.isBooked) {
                        info.el.classList.add('booked');
                    }
                },

                windowResize: () => {
                    if (window.innerWidth < 576) {
                        calendar.setOption('buttonText', {
                            dayGridMonth: 'M',
                            timeGridWeek: 'W',
                            timeGridDay: 'D'
                        });
                    } else {
                        calendar.setOption('buttonText', {
                            dayGridMonth: 'month',
                            timeGridWeek: 'week',
                            timeGridDay: 'day'
                        });
                    }
                }
            });

            calendar.render();

            form.addEventListener('submit', async e => {
                e.preventDefault();
                const body = {
                    doctorId: doctorId,
                    availableDate: dateInput.value,
                    startTime: `${startInput.value}:00`,
                    endTime: `${endInput.value}:00`,
                    slotDuration: parseInt(slotInput.value),
                    maxPatients: parseInt(maxInput.value)
                };

                let url = '/Availability/Create', method = 'POST';
                if (idInput.value) {
                    url = '/Availability/Edit';
                    method = 'PUT';
                    body.id = parseInt(idInput.value);
                }

                const r = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(body)
                });

                if (r.ok) { calendar.refetchEvents(); modal.hide(); }
                else { alert(await r.text()); }
            });

            async function handleChange(info) {
                const ev = info.event;
                if (ev.extendedProps.isBooked) {
                    alert('Cannot modify a booked slot.');
                    info.revert(); return;
                }

                const body = {
                    id: parseInt(ev.id),
                    availableDate: formatDateLocal(ev.start),
                    startTime: `${formatTimeLocal(ev.start)}:00`,
                    endTime: `${formatTimeLocal(ev.end)}:00`,
                    slotDuration: ev.extendedProps.slotDuration,
                    maxPatients: ev.extendedProps.maxPatients
                };

                const r = await fetch('/Availability/Edit', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(body)
                });

                if (!r.ok) { alert(await r.text()); info.revert(); }
            }

            function resetModal() {
                form.reset();
                idInput.value = '';
                deleteBtn.style.display = 'none';
            }
        });
    </script>
}
